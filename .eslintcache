[{"/Users/tommywong/Projects/hand/src/index.js":"1","/Users/tommywong/Projects/hand/src/App.js":"2","/Users/tommywong/Projects/hand/src/reportWebVitals.js":"3","/Users/tommywong/Projects/hand/src/utilities.js":"4"},{"size":512,"mtime":1611326593871,"results":"5","hashOfConfig":"6"},{"size":2056,"mtime":1611343628657,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611325464806,"results":"8","hashOfConfig":"6"},{"size":2356,"mtime":1611344891569,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"qacmc7",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tommywong/Projects/hand/src/index.js",["21"],"import React, { useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["22","23"],"/Users/tommywong/Projects/hand/src/App.js",["24"],"import './App.css';\nimport { drawHand } from './utilities';\n\nimport { useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as handpose from '@tensorflow-models/handpose';\nimport Webcam from 'react-webcam';\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandPose = async () => {\n    // load tensorflow handpose neural network\n    const net = await handpose.load();\n    console.log(\"Handpose loaded.\");\n\n    // create loop to detect hand neural network\n    setInterval(() => {\n      detect(net);\n    }, 100)\n  }\n\n  const detect = async (net) => {\n    // check data is available\n    if (\n      webcamRef.current &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // set video height and width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // make detections\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n\n      // draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  }\n  \n\n  runHandPose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam ref={webcamRef} style={webcamStyle} />\n        <canvas id=\"myCanvas\" ref={canvasRef} style={canvasStyle} />\n      </header>\n    </div>\n  );\n}\n\nconst webcamStyle = {\n  position: 'absolute',\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  left: 0,\n  right: 0,\n  textAlign: 'center',\n  width: 640,\n  height: 480,\n  zindex: 9,\n}\n\nconst canvasStyle = {\n  position: 'absolute',\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  left: 0,\n  right: 0,\n  textAlign: 'center',\n  width: 640,\n  height: 480,\n  zindex: 9,\n}\n\nexport default App;\n","/Users/tommywong/Projects/hand/src/reportWebVitals.js",[],"/Users/tommywong/Projects/hand/src/utilities.js",[],{"ruleId":"25","severity":1,"message":"26","line":1,"column":17,"nodeType":"27","messageId":"28","endLine":1,"endColumn":23},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"25","severity":1,"message":"33","line":5,"column":13,"nodeType":"27","messageId":"28","endLine":5,"endColumn":15},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","no-native-reassign",["34"],"no-negated-in-lhs",["35"],"'tf' is defined but never used.","no-global-assign","no-unsafe-negation"]